
L5_DC_Motor_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc8  08002cc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cc8  08002cc8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cc8  08002cc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc8  08002cc8  00012cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ccc  08002ccc  00012ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08002cdc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002cdc  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009054  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ab  00000000  00000000  00029089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002b298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fbd  00000000  00000000  0002bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad74  00000000  00000000  00042bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088dc9  00000000  00000000  0004d961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d672a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab8  00000000  00000000  000d677c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c78 	.word	0x08002c78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c78 	.word	0x08002c78

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fae9 	bl	8000728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f86f 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f971 	bl	8000440 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015e:	f000 f8bb 	bl	80002d8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000162:	f000 f8f7 	bl	8000354 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);  //PB1
 8000166:	4830      	ldr	r0, [pc, #192]	; (8000228 <main+0xdc>)
 8000168:	f000 fc3c 	bl	80009e4 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PA1 TIM2 CH2
 800016c:	2104      	movs	r1, #4
 800016e:	482f      	ldr	r0, [pc, #188]	; (800022c <main+0xe0>)
 8000170:	f002 f830 	bl	80021d4 <HAL_TIM_PWM_Start>
  uint16_t readValue;
  int speed;
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000174:	2200      	movs	r2, #0
 8000176:	2180      	movs	r1, #128	; 0x80
 8000178:	482d      	ldr	r0, [pc, #180]	; (8000230 <main+0xe4>)
 800017a:	f001 f9ef 	bl	800155c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2120      	movs	r1, #32
 8000182:	482b      	ldr	r0, [pc, #172]	; (8000230 <main+0xe4>)
 8000184:	f001 f9ea 	bl	800155c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    HAL_ADC_PollForConversion(&hadc1,1000);
 8000188:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800018c:	4826      	ldr	r0, [pc, #152]	; (8000228 <main+0xdc>)
 800018e:	f000 fcd7 	bl	8000b40 <HAL_ADC_PollForConversion>
	    readValue = HAL_ADC_GetValue(&hadc1);
 8000192:	4825      	ldr	r0, [pc, #148]	; (8000228 <main+0xdc>)
 8000194:	f000 fdda 	bl	8000d4c <HAL_ADC_GetValue>
 8000198:	4603      	mov	r3, r0
 800019a:	807b      	strh	r3, [r7, #2]
	    if (readValue < 1790) {
 800019c:	887b      	ldrh	r3, [r7, #2]
 800019e:	f240 62fd 	movw	r2, #1789	; 0x6fd
 80001a2:	4293      	cmp	r3, r2
 80001a4:	d818      	bhi.n	80001d8 <main+0x8c>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2180      	movs	r1, #128	; 0x80
 80001aa:	4821      	ldr	r0, [pc, #132]	; (8000230 <main+0xe4>)
 80001ac:	f001 f9d6 	bl	800155c <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2120      	movs	r1, #32
 80001b4:	481e      	ldr	r0, [pc, #120]	; (8000230 <main+0xe4>)
 80001b6:	f001 f9d1 	bl	800155c <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1); //for led
 80001ba:	2201      	movs	r2, #1
 80001bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001c0:	481c      	ldr	r0, [pc, #112]	; (8000234 <main+0xe8>)
 80001c2:	f001 f9cb 	bl	800155c <HAL_GPIO_WritePin>

	      speed = (readValue - 1790) * (-1) / 2;
 80001c6:	887b      	ldrh	r3, [r7, #2]
 80001c8:	f5c3 63df 	rsb	r3, r3, #1784	; 0x6f8
 80001cc:	3306      	adds	r3, #6
 80001ce:	0fda      	lsrs	r2, r3, #31
 80001d0:	4413      	add	r3, r2
 80001d2:	105b      	asrs	r3, r3, #1
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	e01e      	b.n	8000216 <main+0xca>
	    } else if (readValue > 2220) {
 80001d8:	887b      	ldrh	r3, [r7, #2]
 80001da:	f640 02ac 	movw	r2, #2220	; 0x8ac
 80001de:	4293      	cmp	r3, r2
 80001e0:	d917      	bls.n	8000212 <main+0xc6>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2120      	movs	r1, #32
 80001e6:	4812      	ldr	r0, [pc, #72]	; (8000230 <main+0xe4>)
 80001e8:	f001 f9b8 	bl	800155c <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80001ec:	2201      	movs	r2, #1
 80001ee:	2180      	movs	r1, #128	; 0x80
 80001f0:	480f      	ldr	r0, [pc, #60]	; (8000230 <main+0xe4>)
 80001f2:	f001 f9b3 	bl	800155c <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0); //for led
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <main+0xe8>)
 80001fe:	f001 f9ad 	bl	800155c <HAL_GPIO_WritePin>

	      speed = (readValue - 2220) / 2;
 8000202:	887b      	ldrh	r3, [r7, #2]
 8000204:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8000208:	0fda      	lsrs	r2, r3, #31
 800020a:	4413      	add	r3, r2
 800020c:	105b      	asrs	r3, r3, #1
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	e001      	b.n	8000216 <main+0xca>
	    } else {
	      speed = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
	    }
	    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, speed);
 8000216:	4b05      	ldr	r3, [pc, #20]	; (800022c <main+0xe0>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	639a      	str	r2, [r3, #56]	; 0x38
	    HAL_Delay(50);
 800021e:	2032      	movs	r0, #50	; 0x32
 8000220:	f000 fae4 	bl	80007ec <HAL_Delay>
	    HAL_ADC_PollForConversion(&hadc1,1000);
 8000224:	e7b0      	b.n	8000188 <main+0x3c>
 8000226:	bf00      	nop
 8000228:	20000028 	.word	0x20000028
 800022c:	20000058 	.word	0x20000058
 8000230:	40010800 	.word	0x40010800
 8000234:	40010c00 	.word	0x40010c00

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b094      	sub	sp, #80	; 0x50
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fd0e 	bl	8002c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	2302      	movs	r3, #2
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000270:	2310      	movs	r3, #16
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000274:	2300      	movs	r3, #0
 8000276:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027c:	4618      	mov	r0, r3
 800027e:	f001 f985 	bl	800158c <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000288:	f000 f93a 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fbf2 	bl	8001a90 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002b2:	f000 f925 	bl	8000500 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002b6:	2302      	movs	r3, #2
 80002b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fd69 	bl	8001d98 <HAL_RCCEx_PeriphCLKConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002cc:	f000 f918 	bl	8000500 <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3750      	adds	r7, #80	; 0x50
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <MX_ADC1_Init+0x74>)
 80002ea:	4a19      	ldr	r2, [pc, #100]	; (8000350 <MX_ADC1_Init+0x78>)
 80002ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <MX_ADC1_Init+0x74>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <MX_ADC1_Init+0x74>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_ADC1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_ADC1_Init+0x74>)
 8000302:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000306:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <MX_ADC1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_ADC1_Init+0x74>)
 8000310:	2201      	movs	r2, #1
 8000312:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <MX_ADC1_Init+0x74>)
 8000316:	f000 fa8d 	bl	8000834 <HAL_ADC_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000320:	f000 f8ee 	bl	8000500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000324:	2309      	movs	r3, #9
 8000326:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000328:	2301      	movs	r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	4619      	mov	r1, r3
 8000334:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_ADC1_Init+0x74>)
 8000336:	f000 fd15 	bl	8000d64 <HAL_ADC_ConfigChannel>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000340:	f000 f8de 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000344:	bf00      	nop
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000028 	.word	0x20000028
 8000350:	40012400 	.word	0x40012400

08000354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b08e      	sub	sp, #56	; 0x38
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000368:	f107 0320 	add.w	r3, r7, #32
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
 8000380:	615a      	str	r2, [r3, #20]
 8000382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000384:	4b2d      	ldr	r3, [pc, #180]	; (800043c <MX_TIM2_Init+0xe8>)
 8000386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 800038c:	4b2b      	ldr	r3, [pc, #172]	; (800043c <MX_TIM2_Init+0xe8>)
 800038e:	227f      	movs	r2, #127	; 0x7f
 8000390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000392:	4b2a      	ldr	r3, [pc, #168]	; (800043c <MX_TIM2_Init+0xe8>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8000398:	4b28      	ldr	r3, [pc, #160]	; (800043c <MX_TIM2_Init+0xe8>)
 800039a:	f240 2271 	movw	r2, #625	; 0x271
 800039e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a0:	4b26      	ldr	r3, [pc, #152]	; (800043c <MX_TIM2_Init+0xe8>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a6:	4b25      	ldr	r3, [pc, #148]	; (800043c <MX_TIM2_Init+0xe8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ac:	4823      	ldr	r0, [pc, #140]	; (800043c <MX_TIM2_Init+0xe8>)
 80003ae:	f001 fe69 	bl	8002084 <HAL_TIM_Base_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003b8:	f000 f8a2 	bl	8000500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c6:	4619      	mov	r1, r3
 80003c8:	481c      	ldr	r0, [pc, #112]	; (800043c <MX_TIM2_Init+0xe8>)
 80003ca:	f002 f863 	bl	8002494 <HAL_TIM_ConfigClockSource>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80003d4:	f000 f894 	bl	8000500 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003d8:	4818      	ldr	r0, [pc, #96]	; (800043c <MX_TIM2_Init+0xe8>)
 80003da:	f001 fea2 	bl	8002122 <HAL_TIM_PWM_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003e4:	f000 f88c 	bl	8000500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e8:	2300      	movs	r3, #0
 80003ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f0:	f107 0320 	add.w	r3, r7, #32
 80003f4:	4619      	mov	r1, r3
 80003f6:	4811      	ldr	r0, [pc, #68]	; (800043c <MX_TIM2_Init+0xe8>)
 80003f8:	f002 fbb4 	bl	8002b64 <HAL_TIMEx_MasterConfigSynchronization>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000402:	f000 f87d 	bl	8000500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000406:	2360      	movs	r3, #96	; 0x60
 8000408:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2204      	movs	r2, #4
 800041a:	4619      	mov	r1, r3
 800041c:	4807      	ldr	r0, [pc, #28]	; (800043c <MX_TIM2_Init+0xe8>)
 800041e:	f001 ff7b 	bl	8002318 <HAL_TIM_PWM_ConfigChannel>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000428:	f000 f86a 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <MX_TIM2_Init+0xe8>)
 800042e:	f000 f8f7 	bl	8000620 <HAL_TIM_MspPostInit>

}
 8000432:	bf00      	nop
 8000434:	3738      	adds	r7, #56	; 0x38
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000058 	.word	0x20000058

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000454:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <MX_GPIO_Init+0xb4>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a26      	ldr	r2, [pc, #152]	; (80004f4 <MX_GPIO_Init+0xb4>)
 800045a:	f043 0320 	orr.w	r3, r3, #32
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b24      	ldr	r3, [pc, #144]	; (80004f4 <MX_GPIO_Init+0xb4>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0320 	and.w	r3, r3, #32
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b21      	ldr	r3, [pc, #132]	; (80004f4 <MX_GPIO_Init+0xb4>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a20      	ldr	r2, [pc, #128]	; (80004f4 <MX_GPIO_Init+0xb4>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <MX_GPIO_Init+0xb4>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0304 	and.w	r3, r3, #4
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <MX_GPIO_Init+0xb4>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a1a      	ldr	r2, [pc, #104]	; (80004f4 <MX_GPIO_Init+0xb4>)
 800048a:	f043 0308 	orr.w	r3, r3, #8
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_GPIO_Init+0xb4>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0308 	and.w	r3, r3, #8
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	21a0      	movs	r1, #160	; 0xa0
 80004a0:	4815      	ldr	r0, [pc, #84]	; (80004f8 <MX_GPIO_Init+0xb8>)
 80004a2:	f001 f85b 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ac:	4813      	ldr	r0, [pc, #76]	; (80004fc <MX_GPIO_Init+0xbc>)
 80004ae:	f001 f855 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004b2:	23a0      	movs	r3, #160	; 0xa0
 80004b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2302      	movs	r3, #2
 80004c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	4619      	mov	r1, r3
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <MX_GPIO_Init+0xb8>)
 80004ca:	f000 fec3 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2302      	movs	r3, #2
 80004de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	4619      	mov	r1, r3
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <MX_GPIO_Init+0xbc>)
 80004e8:	f000 feb4 	bl	8001254 <HAL_GPIO_Init>

}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010800 	.word	0x40010800
 80004fc:	40010c00 	.word	0x40010c00

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	e7fe      	b.n	8000508 <Error_Handler+0x8>
	...

0800050c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_MspInit+0x5c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a14      	ldr	r2, [pc, #80]	; (8000568 <HAL_MspInit+0x5c>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_MspInit+0x5c>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_MspInit+0x5c>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <HAL_MspInit+0x5c>)
 8000530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <HAL_MspInit+0x5c>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <HAL_MspInit+0x60>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <HAL_MspInit+0x60>)
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	40021000 	.word	0x40021000
 800056c:	40010000 	.word	0x40010000

08000570 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a14      	ldr	r2, [pc, #80]	; (80005dc <HAL_ADC_MspInit+0x6c>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d121      	bne.n	80005d4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000590:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <HAL_ADC_MspInit+0x70>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <HAL_ADC_MspInit+0x70>)
 8000596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <HAL_ADC_MspInit+0x70>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <HAL_ADC_MspInit+0x70>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <HAL_ADC_MspInit+0x70>)
 80005ae:	f043 0308 	orr.w	r3, r3, #8
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_ADC_MspInit+0x70>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0308 	and.w	r3, r3, #8
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005c0:	2302      	movs	r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c4:	2303      	movs	r3, #3
 80005c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <HAL_ADC_MspInit+0x74>)
 80005d0:	f000 fe40 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40012400 	.word	0x40012400
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005f8:	d10b      	bne.n	8000612 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <HAL_TIM_Base_MspInit+0x34>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_TIM_Base_MspInit+0x34>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_TIM_Base_MspInit+0x34>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800063e:	d117      	bne.n	8000670 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <HAL_TIM_MspPostInit+0x58>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <HAL_TIM_MspPostInit+0x58>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_TIM_MspPostInit+0x58>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <HAL_TIM_MspPostInit+0x5c>)
 800066c:	f000 fdf2 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000
 800067c:	40010800 	.word	0x40010800

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler+0x4>

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <MemManage_Handler+0x4>

08000692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <UsageFault_Handler+0x4>

0800069e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr

080006aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c6:	f000 f875 	bl	80007b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}

080006ce <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
	...

080006dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006de:	490d      	ldr	r1, [pc, #52]	; (8000714 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006e0:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a0a      	ldr	r2, [pc, #40]	; (800071c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006f4:	4c0a      	ldr	r4, [pc, #40]	; (8000720 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000702:	f7ff ffe4 	bl	80006ce <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000706:	f002 fa8b 	bl	8002c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070a:	f7ff fd1f 	bl	800014c <main>
  bx lr
 800070e:	4770      	bx	lr
  ldr r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000714:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000718:	08002cd0 	.word	0x08002cd0
  ldr r2, =_sbss
 800071c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000720:	200000a4 	.word	0x200000a4

08000724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC1_2_IRQHandler>
	...

08000728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <HAL_Init+0x28>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a07      	ldr	r2, [pc, #28]	; (8000750 <HAL_Init+0x28>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000738:	2003      	movs	r0, #3
 800073a:	f000 fd57 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800073e:	200f      	movs	r0, #15
 8000740:	f000 f808 	bl	8000754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000744:	f7ff fee2 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40022000 	.word	0x40022000

08000754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_InitTick+0x54>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_InitTick+0x58>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076a:	fbb3 f3f1 	udiv	r3, r3, r1
 800076e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fd61 	bl	800123a <HAL_SYSTICK_Config>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e00e      	b.n	80007a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b0f      	cmp	r3, #15
 8000786:	d80a      	bhi.n	800079e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000788:	2200      	movs	r2, #0
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	f04f 30ff 	mov.w	r0, #4294967295
 8000790:	f000 fd37 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000794:	4a06      	ldr	r2, [pc, #24]	; (80007b0 <HAL_InitTick+0x5c>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800079a:	2300      	movs	r3, #0
 800079c:	e000      	b.n	80007a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000004 	.word	0x20000004

080007b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_IncTick+0x1c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_IncTick+0x20>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <HAL_IncTick+0x20>)
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	20000008 	.word	0x20000008
 80007d4:	200000a0 	.word	0x200000a0

080007d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return uwTick;
 80007dc:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <HAL_GetTick+0x10>)
 80007de:	681b      	ldr	r3, [r3, #0]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	200000a0 	.word	0x200000a0

080007ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f4:	f7ff fff0 	bl	80007d8 <HAL_GetTick>
 80007f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000804:	d005      	beq.n	8000812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_Delay+0x44>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4413      	add	r3, r2
 8000810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000812:	bf00      	nop
 8000814:	f7ff ffe0 	bl	80007d8 <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	429a      	cmp	r2, r3
 8000822:	d8f7      	bhi.n	8000814 <HAL_Delay+0x28>
  {
  }
}
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000008 	.word	0x20000008

08000834 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800083c:	2300      	movs	r3, #0
 800083e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e0be      	b.n	80009d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000860:	2b00      	cmp	r3, #0
 8000862:	d109      	bne.n	8000878 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2200      	movs	r2, #0
 8000868:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff fe7c 	bl	8000570 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f000 fbc5 	bl	8001008 <ADC_ConversionStop_Disable>
 800087e:	4603      	mov	r3, r0
 8000880:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	2b00      	cmp	r3, #0
 800088c:	f040 8099 	bne.w	80009c2 <HAL_ADC_Init+0x18e>
 8000890:	7dfb      	ldrb	r3, [r7, #23]
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8095 	bne.w	80009c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008a0:	f023 0302 	bic.w	r3, r3, #2
 80008a4:	f043 0202 	orr.w	r2, r3, #2
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	7b1b      	ldrb	r3, [r3, #12]
 80008ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008cc:	d003      	beq.n	80008d6 <HAL_ADC_Init+0xa2>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d102      	bne.n	80008dc <HAL_ADC_Init+0xa8>
 80008d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008da:	e000      	b.n	80008de <HAL_ADC_Init+0xaa>
 80008dc:	2300      	movs	r3, #0
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7d1b      	ldrb	r3, [r3, #20]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d119      	bne.n	8000920 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7b1b      	ldrb	r3, [r3, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d109      	bne.n	8000908 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	035a      	lsls	r2, r3, #13
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	4313      	orrs	r3, r2
 8000900:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	e00b      	b.n	8000920 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090c:	f043 0220 	orr.w	r2, r3, #32
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000918:	f043 0201 	orr.w	r2, r3, #1
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	430a      	orrs	r2, r1
 8000932:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	4b28      	ldr	r3, [pc, #160]	; (80009dc <HAL_ADC_Init+0x1a8>)
 800093c:	4013      	ands	r3, r2
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	6812      	ldr	r2, [r2, #0]
 8000942:	68b9      	ldr	r1, [r7, #8]
 8000944:	430b      	orrs	r3, r1
 8000946:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000950:	d003      	beq.n	800095a <HAL_ADC_Init+0x126>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d104      	bne.n	8000964 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	3b01      	subs	r3, #1
 8000960:	051b      	lsls	r3, r3, #20
 8000962:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	430a      	orrs	r2, r1
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	689a      	ldr	r2, [r3, #8]
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_ADC_Init+0x1ac>)
 8000980:	4013      	ands	r3, r2
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	429a      	cmp	r2, r3
 8000986:	d10b      	bne.n	80009a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000992:	f023 0303 	bic.w	r3, r3, #3
 8000996:	f043 0201 	orr.w	r2, r3, #1
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800099e:	e018      	b.n	80009d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a4:	f023 0312 	bic.w	r3, r3, #18
 80009a8:	f043 0210 	orr.w	r2, r3, #16
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b4:	f043 0201 	orr.w	r2, r3, #1
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009c0:	e007      	b.n	80009d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c6:	f043 0210 	orr.w	r2, r3, #16
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	ffe1f7fd 	.word	0xffe1f7fd
 80009e0:	ff1f0efe 	.word	0xff1f0efe

080009e4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d101      	bne.n	80009fe <HAL_ADC_Start+0x1a>
 80009fa:	2302      	movs	r3, #2
 80009fc:	e098      	b.n	8000b30 <HAL_ADC_Start+0x14c>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 faa4 	bl	8000f54 <ADC_Enable>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f040 8087 	bne.w	8000b26 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a20:	f023 0301 	bic.w	r3, r3, #1
 8000a24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a41      	ldr	r2, [pc, #260]	; (8000b38 <HAL_ADC_Start+0x154>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d105      	bne.n	8000a42 <HAL_ADC_Start+0x5e>
 8000a36:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <HAL_ADC_Start+0x158>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d115      	bne.n	8000a6e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d026      	beq.n	8000aaa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a6c:	e01d      	b.n	8000aaa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a2f      	ldr	r2, [pc, #188]	; (8000b3c <HAL_ADC_Start+0x158>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d004      	beq.n	8000a8e <HAL_ADC_Start+0xaa>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a2b      	ldr	r2, [pc, #172]	; (8000b38 <HAL_ADC_Start+0x154>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d10d      	bne.n	8000aaa <HAL_ADC_Start+0xc6>
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <HAL_ADC_Start+0x158>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d007      	beq.n	8000aaa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000aa2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d006      	beq.n	8000ac4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aba:	f023 0206 	bic.w	r2, r3, #6
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ac2:	e002      	b.n	8000aca <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f06f 0202 	mvn.w	r2, #2
 8000ada:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ae6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000aea:	d113      	bne.n	8000b14 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000af0:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <HAL_ADC_Start+0x154>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d105      	bne.n	8000b02 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_ADC_Start+0x158>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d108      	bne.n	8000b14 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	e00c      	b.n	8000b2e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	e003      	b.n	8000b2e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40012800 	.word	0x40012800
 8000b3c:	40012400 	.word	0x40012400

08000b40 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b56:	f7ff fe3f 	bl	80007d8 <HAL_GetTick>
 8000b5a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00b      	beq.n	8000b82 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6e:	f043 0220 	orr.w	r2, r3, #32
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e0d3      	b.n	8000d2a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d131      	bne.n	8000bf4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d12a      	bne.n	8000bf4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b9e:	e021      	b.n	8000be4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba6:	d01d      	beq.n	8000be4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d007      	beq.n	8000bbe <HAL_ADC_PollForConversion+0x7e>
 8000bae:	f7ff fe13 	bl	80007d8 <HAL_GetTick>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d212      	bcs.n	8000be4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10b      	bne.n	8000be4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd0:	f043 0204 	orr.w	r2, r3, #4
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000be0:	2303      	movs	r3, #3
 8000be2:	e0a2      	b.n	8000d2a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0d6      	beq.n	8000ba0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bf2:	e070      	b.n	8000cd6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000bf4:	4b4f      	ldr	r3, [pc, #316]	; (8000d34 <HAL_ADC_PollForConversion+0x1f4>)
 8000bf6:	681c      	ldr	r4, [r3, #0]
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f001 f983 	bl	8001f04 <HAL_RCCEx_GetPeriphCLKFreq>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6919      	ldr	r1, [r3, #16]
 8000c0a:	4b4b      	ldr	r3, [pc, #300]	; (8000d38 <HAL_ADC_PollForConversion+0x1f8>)
 8000c0c:	400b      	ands	r3, r1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d118      	bne.n	8000c44 <HAL_ADC_PollForConversion+0x104>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68d9      	ldr	r1, [r3, #12]
 8000c18:	4b48      	ldr	r3, [pc, #288]	; (8000d3c <HAL_ADC_PollForConversion+0x1fc>)
 8000c1a:	400b      	ands	r3, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d111      	bne.n	8000c44 <HAL_ADC_PollForConversion+0x104>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6919      	ldr	r1, [r3, #16]
 8000c26:	4b46      	ldr	r3, [pc, #280]	; (8000d40 <HAL_ADC_PollForConversion+0x200>)
 8000c28:	400b      	ands	r3, r1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d108      	bne.n	8000c40 <HAL_ADC_PollForConversion+0x100>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68d9      	ldr	r1, [r3, #12]
 8000c34:	4b43      	ldr	r3, [pc, #268]	; (8000d44 <HAL_ADC_PollForConversion+0x204>)
 8000c36:	400b      	ands	r3, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <HAL_ADC_PollForConversion+0x100>
 8000c3c:	2314      	movs	r3, #20
 8000c3e:	e020      	b.n	8000c82 <HAL_ADC_PollForConversion+0x142>
 8000c40:	2329      	movs	r3, #41	; 0x29
 8000c42:	e01e      	b.n	8000c82 <HAL_ADC_PollForConversion+0x142>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6919      	ldr	r1, [r3, #16]
 8000c4a:	4b3d      	ldr	r3, [pc, #244]	; (8000d40 <HAL_ADC_PollForConversion+0x200>)
 8000c4c:	400b      	ands	r3, r1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d106      	bne.n	8000c60 <HAL_ADC_PollForConversion+0x120>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68d9      	ldr	r1, [r3, #12]
 8000c58:	4b3a      	ldr	r3, [pc, #232]	; (8000d44 <HAL_ADC_PollForConversion+0x204>)
 8000c5a:	400b      	ands	r3, r1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00d      	beq.n	8000c7c <HAL_ADC_PollForConversion+0x13c>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6919      	ldr	r1, [r3, #16]
 8000c66:	4b38      	ldr	r3, [pc, #224]	; (8000d48 <HAL_ADC_PollForConversion+0x208>)
 8000c68:	400b      	ands	r3, r1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d108      	bne.n	8000c80 <HAL_ADC_PollForConversion+0x140>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68d9      	ldr	r1, [r3, #12]
 8000c74:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <HAL_ADC_PollForConversion+0x208>)
 8000c76:	400b      	ands	r3, r1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d101      	bne.n	8000c80 <HAL_ADC_PollForConversion+0x140>
 8000c7c:	2354      	movs	r3, #84	; 0x54
 8000c7e:	e000      	b.n	8000c82 <HAL_ADC_PollForConversion+0x142>
 8000c80:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000c82:	fb02 f303 	mul.w	r3, r2, r3
 8000c86:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c88:	e021      	b.n	8000cce <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c90:	d01a      	beq.n	8000cc8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d007      	beq.n	8000ca8 <HAL_ADC_PollForConversion+0x168>
 8000c98:	f7ff fd9e 	bl	80007d8 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d20f      	bcs.n	8000cc8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d90b      	bls.n	8000cc8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb4:	f043 0204 	orr.w	r2, r3, #4
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e030      	b.n	8000d2a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d8d9      	bhi.n	8000c8a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f06f 0212 	mvn.w	r2, #18
 8000cde:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cf6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cfa:	d115      	bne.n	8000d28 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d111      	bne.n	8000d28 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d105      	bne.n	8000d28 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d20:	f043 0201 	orr.w	r2, r3, #1
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	371c      	adds	r7, #28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd90      	pop	{r4, r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000000 	.word	0x20000000
 8000d38:	24924924 	.word	0x24924924
 8000d3c:	00924924 	.word	0x00924924
 8000d40:	12492492 	.word	0x12492492
 8000d44:	00492492 	.word	0x00492492
 8000d48:	00249249 	.word	0x00249249

08000d4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d101      	bne.n	8000d84 <HAL_ADC_ConfigChannel+0x20>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e0dc      	b.n	8000f3e <HAL_ADC_ConfigChannel+0x1da>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b06      	cmp	r3, #6
 8000d92:	d81c      	bhi.n	8000dce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	3b05      	subs	r3, #5
 8000da6:	221f      	movs	r2, #31
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	4019      	ands	r1, r3
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	3b05      	subs	r3, #5
 8000dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34
 8000dcc:	e03c      	b.n	8000e48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b0c      	cmp	r3, #12
 8000dd4:	d81c      	bhi.n	8000e10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	3b23      	subs	r3, #35	; 0x23
 8000de8:	221f      	movs	r2, #31
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	4019      	ands	r1, r3
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	6818      	ldr	r0, [r3, #0]
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	3b23      	subs	r3, #35	; 0x23
 8000e02:	fa00 f203 	lsl.w	r2, r0, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0e:	e01b      	b.n	8000e48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	3b41      	subs	r3, #65	; 0x41
 8000e22:	221f      	movs	r2, #31
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	4019      	ands	r1, r3
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	3b41      	subs	r3, #65	; 0x41
 8000e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b09      	cmp	r3, #9
 8000e4e:	d91c      	bls.n	8000e8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68d9      	ldr	r1, [r3, #12]
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	3b1e      	subs	r3, #30
 8000e62:	2207      	movs	r2, #7
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	4019      	ands	r1, r3
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	6898      	ldr	r0, [r3, #8]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4613      	mov	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	3b1e      	subs	r3, #30
 8000e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	430a      	orrs	r2, r1
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	e019      	b.n	8000ebe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6919      	ldr	r1, [r3, #16]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4613      	mov	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4413      	add	r3, r2
 8000e9a:	2207      	movs	r2, #7
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	4019      	ands	r1, r3
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	6898      	ldr	r0, [r3, #8]
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b10      	cmp	r3, #16
 8000ec4:	d003      	beq.n	8000ece <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eca:	2b11      	cmp	r3, #17
 8000ecc:	d132      	bne.n	8000f34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d125      	bne.n	8000f24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d126      	bne.n	8000f34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ef4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b10      	cmp	r3, #16
 8000efc:	d11a      	bne.n	8000f34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <HAL_ADC_ConfigChannel+0x1e8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	0c9a      	lsrs	r2, r3, #18
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f14:	e002      	b.n	8000f1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f9      	bne.n	8000f16 <HAL_ADC_ConfigChannel+0x1b2>
 8000f22:	e007      	b.n	8000f34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f043 0220 	orr.w	r2, r3, #32
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	40012400 	.word	0x40012400
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	431bde83 	.word	0x431bde83

08000f54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d040      	beq.n	8000ff4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0201 	orr.w	r2, r2, #1
 8000f80:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <ADC_Enable+0xac>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <ADC_Enable+0xb0>)
 8000f88:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8c:	0c9b      	lsrs	r3, r3, #18
 8000f8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f90:	e002      	b.n	8000f98 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f9      	bne.n	8000f92 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f9e:	f7ff fc1b 	bl	80007d8 <HAL_GetTick>
 8000fa2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fa4:	e01f      	b.n	8000fe6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fa6:	f7ff fc17 	bl	80007d8 <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d918      	bls.n	8000fe6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d011      	beq.n	8000fe6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc6:	f043 0210 	orr.w	r2, r3, #16
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	f043 0201 	orr.w	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e007      	b.n	8000ff6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d1d8      	bne.n	8000fa6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000000 	.word	0x20000000
 8001004:	431bde83 	.word	0x431bde83

08001008 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b01      	cmp	r3, #1
 8001020:	d12e      	bne.n	8001080 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0201 	bic.w	r2, r2, #1
 8001030:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001032:	f7ff fbd1 	bl	80007d8 <HAL_GetTick>
 8001036:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001038:	e01b      	b.n	8001072 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800103a:	f7ff fbcd 	bl	80007d8 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d914      	bls.n	8001072 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b01      	cmp	r3, #1
 8001054:	d10d      	bne.n	8001072 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105a:	f043 0210 	orr.w	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001066:	f043 0201 	orr.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e007      	b.n	8001082 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b01      	cmp	r3, #1
 800107e:	d0dc      	beq.n	800103a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f7ff ff90 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff49 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff5e 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff90 	bl	8001144 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5f 	bl	80010f0 <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffb0 	bl	80011a8 <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b08b      	sub	sp, #44	; 0x2c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001266:	e169      	b.n	800153c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001268:	2201      	movs	r2, #1
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8158 	bne.w	8001536 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4a9a      	ldr	r2, [pc, #616]	; (80014f4 <HAL_GPIO_Init+0x2a0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d05e      	beq.n	800134e <HAL_GPIO_Init+0xfa>
 8001290:	4a98      	ldr	r2, [pc, #608]	; (80014f4 <HAL_GPIO_Init+0x2a0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d875      	bhi.n	8001382 <HAL_GPIO_Init+0x12e>
 8001296:	4a98      	ldr	r2, [pc, #608]	; (80014f8 <HAL_GPIO_Init+0x2a4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d058      	beq.n	800134e <HAL_GPIO_Init+0xfa>
 800129c:	4a96      	ldr	r2, [pc, #600]	; (80014f8 <HAL_GPIO_Init+0x2a4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d86f      	bhi.n	8001382 <HAL_GPIO_Init+0x12e>
 80012a2:	4a96      	ldr	r2, [pc, #600]	; (80014fc <HAL_GPIO_Init+0x2a8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d052      	beq.n	800134e <HAL_GPIO_Init+0xfa>
 80012a8:	4a94      	ldr	r2, [pc, #592]	; (80014fc <HAL_GPIO_Init+0x2a8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d869      	bhi.n	8001382 <HAL_GPIO_Init+0x12e>
 80012ae:	4a94      	ldr	r2, [pc, #592]	; (8001500 <HAL_GPIO_Init+0x2ac>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d04c      	beq.n	800134e <HAL_GPIO_Init+0xfa>
 80012b4:	4a92      	ldr	r2, [pc, #584]	; (8001500 <HAL_GPIO_Init+0x2ac>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d863      	bhi.n	8001382 <HAL_GPIO_Init+0x12e>
 80012ba:	4a92      	ldr	r2, [pc, #584]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d046      	beq.n	800134e <HAL_GPIO_Init+0xfa>
 80012c0:	4a90      	ldr	r2, [pc, #576]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d85d      	bhi.n	8001382 <HAL_GPIO_Init+0x12e>
 80012c6:	2b12      	cmp	r3, #18
 80012c8:	d82a      	bhi.n	8001320 <HAL_GPIO_Init+0xcc>
 80012ca:	2b12      	cmp	r3, #18
 80012cc:	d859      	bhi.n	8001382 <HAL_GPIO_Init+0x12e>
 80012ce:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <HAL_GPIO_Init+0x80>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	0800134f 	.word	0x0800134f
 80012d8:	08001329 	.word	0x08001329
 80012dc:	0800133b 	.word	0x0800133b
 80012e0:	0800137d 	.word	0x0800137d
 80012e4:	08001383 	.word	0x08001383
 80012e8:	08001383 	.word	0x08001383
 80012ec:	08001383 	.word	0x08001383
 80012f0:	08001383 	.word	0x08001383
 80012f4:	08001383 	.word	0x08001383
 80012f8:	08001383 	.word	0x08001383
 80012fc:	08001383 	.word	0x08001383
 8001300:	08001383 	.word	0x08001383
 8001304:	08001383 	.word	0x08001383
 8001308:	08001383 	.word	0x08001383
 800130c:	08001383 	.word	0x08001383
 8001310:	08001383 	.word	0x08001383
 8001314:	08001383 	.word	0x08001383
 8001318:	08001331 	.word	0x08001331
 800131c:	08001345 	.word	0x08001345
 8001320:	4a79      	ldr	r2, [pc, #484]	; (8001508 <HAL_GPIO_Init+0x2b4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001326:	e02c      	b.n	8001382 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	623b      	str	r3, [r7, #32]
          break;
 800132e:	e029      	b.n	8001384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	3304      	adds	r3, #4
 8001336:	623b      	str	r3, [r7, #32]
          break;
 8001338:	e024      	b.n	8001384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	3308      	adds	r3, #8
 8001340:	623b      	str	r3, [r7, #32]
          break;
 8001342:	e01f      	b.n	8001384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	330c      	adds	r3, #12
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e01a      	b.n	8001384 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001356:	2304      	movs	r3, #4
 8001358:	623b      	str	r3, [r7, #32]
          break;
 800135a:	e013      	b.n	8001384 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d105      	bne.n	8001370 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001364:	2308      	movs	r3, #8
 8001366:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	611a      	str	r2, [r3, #16]
          break;
 800136e:	e009      	b.n	8001384 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001370:	2308      	movs	r3, #8
 8001372:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	615a      	str	r2, [r3, #20]
          break;
 800137a:	e003      	b.n	8001384 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
          break;
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x130>
          break;
 8001382:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2bff      	cmp	r3, #255	; 0xff
 8001388:	d801      	bhi.n	800138e <HAL_GPIO_Init+0x13a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	e001      	b.n	8001392 <HAL_GPIO_Init+0x13e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3304      	adds	r3, #4
 8001392:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2bff      	cmp	r3, #255	; 0xff
 8001398:	d802      	bhi.n	80013a0 <HAL_GPIO_Init+0x14c>
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	e002      	b.n	80013a6 <HAL_GPIO_Init+0x152>
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	3b08      	subs	r3, #8
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	210f      	movs	r1, #15
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	401a      	ands	r2, r3
 80013b8:	6a39      	ldr	r1, [r7, #32]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	431a      	orrs	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 80b1 	beq.w	8001536 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013d4:	4b4d      	ldr	r3, [pc, #308]	; (800150c <HAL_GPIO_Init+0x2b8>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a4c      	ldr	r2, [pc, #304]	; (800150c <HAL_GPIO_Init+0x2b8>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b4a      	ldr	r3, [pc, #296]	; (800150c <HAL_GPIO_Init+0x2b8>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013ec:	4a48      	ldr	r2, [pc, #288]	; (8001510 <HAL_GPIO_Init+0x2bc>)
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a40      	ldr	r2, [pc, #256]	; (8001514 <HAL_GPIO_Init+0x2c0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d013      	beq.n	8001440 <HAL_GPIO_Init+0x1ec>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a3f      	ldr	r2, [pc, #252]	; (8001518 <HAL_GPIO_Init+0x2c4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00d      	beq.n	800143c <HAL_GPIO_Init+0x1e8>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a3e      	ldr	r2, [pc, #248]	; (800151c <HAL_GPIO_Init+0x2c8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0x1e4>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a3d      	ldr	r2, [pc, #244]	; (8001520 <HAL_GPIO_Init+0x2cc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d101      	bne.n	8001434 <HAL_GPIO_Init+0x1e0>
 8001430:	2303      	movs	r3, #3
 8001432:	e006      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 8001434:	2304      	movs	r3, #4
 8001436:	e004      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 8001438:	2302      	movs	r3, #2
 800143a:	e002      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 8001440:	2300      	movs	r3, #0
 8001442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001444:	f002 0203 	and.w	r2, r2, #3
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	4093      	lsls	r3, r2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001452:	492f      	ldr	r1, [pc, #188]	; (8001510 <HAL_GPIO_Init+0x2bc>)
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800146c:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	492c      	ldr	r1, [pc, #176]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	43db      	mvns	r3, r3
 8001482:	4928      	ldr	r1, [pc, #160]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 8001484:	4013      	ands	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001494:	4b23      	ldr	r3, [pc, #140]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	4922      	ldr	r1, [pc, #136]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	491e      	ldr	r1, [pc, #120]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	4918      	ldr	r1, [pc, #96]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	608b      	str	r3, [r1, #8]
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4914      	ldr	r1, [pc, #80]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d021      	beq.n	8001528 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	490e      	ldr	r1, [pc, #56]	; (8001524 <HAL_GPIO_Init+0x2d0>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60cb      	str	r3, [r1, #12]
 80014f0:	e021      	b.n	8001536 <HAL_GPIO_Init+0x2e2>
 80014f2:	bf00      	nop
 80014f4:	10320000 	.word	0x10320000
 80014f8:	10310000 	.word	0x10310000
 80014fc:	10220000 	.word	0x10220000
 8001500:	10210000 	.word	0x10210000
 8001504:	10120000 	.word	0x10120000
 8001508:	10110000 	.word	0x10110000
 800150c:	40021000 	.word	0x40021000
 8001510:	40010000 	.word	0x40010000
 8001514:	40010800 	.word	0x40010800
 8001518:	40010c00 	.word	0x40010c00
 800151c:	40011000 	.word	0x40011000
 8001520:	40011400 	.word	0x40011400
 8001524:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_GPIO_Init+0x304>)
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	43db      	mvns	r3, r3
 8001530:	4909      	ldr	r1, [pc, #36]	; (8001558 <HAL_GPIO_Init+0x304>)
 8001532:	4013      	ands	r3, r2
 8001534:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	3301      	adds	r3, #1
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	fa22 f303 	lsr.w	r3, r2, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	f47f ae8e 	bne.w	8001268 <HAL_GPIO_Init+0x14>
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	372c      	adds	r7, #44	; 0x2c
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40010400 	.word	0x40010400

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001578:	e003      	b.n	8001582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	611a      	str	r2, [r3, #16]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e272      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 8087 	beq.w	80016ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ac:	4b92      	ldr	r3, [pc, #584]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d00c      	beq.n	80015d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015b8:	4b8f      	ldr	r3, [pc, #572]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d112      	bne.n	80015ea <HAL_RCC_OscConfig+0x5e>
 80015c4:	4b8c      	ldr	r3, [pc, #560]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d0:	d10b      	bne.n	80015ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d2:	4b89      	ldr	r3, [pc, #548]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d06c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x12c>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d168      	bne.n	80016b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e24c      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x76>
 80015f4:	4b80      	ldr	r3, [pc, #512]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a7f      	ldr	r2, [pc, #508]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	e02e      	b.n	8001660 <HAL_RCC_OscConfig+0xd4>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x98>
 800160a:	4b7b      	ldr	r3, [pc, #492]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a7a      	ldr	r2, [pc, #488]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b78      	ldr	r3, [pc, #480]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a77      	ldr	r2, [pc, #476]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800161c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e01d      	b.n	8001660 <HAL_RCC_OscConfig+0xd4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0xbc>
 800162e:	4b72      	ldr	r3, [pc, #456]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a71      	ldr	r2, [pc, #452]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b6f      	ldr	r3, [pc, #444]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6e      	ldr	r2, [pc, #440]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0xd4>
 8001648:	4b6b      	ldr	r3, [pc, #428]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a6a      	ldr	r2, [pc, #424]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b68      	ldr	r3, [pc, #416]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a67      	ldr	r2, [pc, #412]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff f8b6 	bl	80007d8 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff f8b2 	bl	80007d8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e200      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b5d      	ldr	r3, [pc, #372]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0xe4>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff f8a2 	bl	80007d8 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff f89e 	bl	80007d8 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1ec      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	4b53      	ldr	r3, [pc, #332]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x10c>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d063      	beq.n	800178e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016c6:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016d2:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d11c      	bne.n	8001718 <HAL_RCC_OscConfig+0x18c>
 80016de:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d116      	bne.n	8001718 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	4b43      	ldr	r3, [pc, #268]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x176>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e1c0      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4939      	ldr	r1, [pc, #228]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	e03a      	b.n	800178e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001720:	4b36      	ldr	r3, [pc, #216]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff f857 	bl	80007d8 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172e:	f7ff f853 	bl	80007d8 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e1a1      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4927      	ldr	r1, [pc, #156]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff f836 	bl	80007d8 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff f832 	bl	80007d8 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e180      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d03a      	beq.n	8001810 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d019      	beq.n	80017d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_RCC_OscConfig+0x274>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a8:	f7ff f816 	bl	80007d8 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff f812 	bl	80007d8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e160      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ce:	2001      	movs	r0, #1
 80017d0:	f000 fac4 	bl	8001d5c <RCC_Delay>
 80017d4:	e01c      	b.n	8001810 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_RCC_OscConfig+0x274>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7fe fffc 	bl	80007d8 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e2:	e00f      	b.n	8001804 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e4:	f7fe fff8 	bl	80007d8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d908      	bls.n	8001804 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e146      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	42420000 	.word	0x42420000
 8001800:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	4b92      	ldr	r3, [pc, #584]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1e9      	bne.n	80017e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80a6 	beq.w	800196a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001822:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10d      	bne.n	800184a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4a87      	ldr	r2, [pc, #540]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	61d3      	str	r3, [r2, #28]
 800183a:	4b85      	ldr	r3, [pc, #532]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001846:	2301      	movs	r3, #1
 8001848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184a:	4b82      	ldr	r3, [pc, #520]	; (8001a54 <HAL_RCC_OscConfig+0x4c8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d118      	bne.n	8001888 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001856:	4b7f      	ldr	r3, [pc, #508]	; (8001a54 <HAL_RCC_OscConfig+0x4c8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a7e      	ldr	r2, [pc, #504]	; (8001a54 <HAL_RCC_OscConfig+0x4c8>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001862:	f7fe ffb9 	bl	80007d8 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186a:	f7fe ffb5 	bl	80007d8 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b64      	cmp	r3, #100	; 0x64
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e103      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187c:	4b75      	ldr	r3, [pc, #468]	; (8001a54 <HAL_RCC_OscConfig+0x4c8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x312>
 8001890:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4a6e      	ldr	r2, [pc, #440]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6213      	str	r3, [r2, #32]
 800189c:	e02d      	b.n	80018fa <HAL_RCC_OscConfig+0x36e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x334>
 80018a6:	4b6a      	ldr	r3, [pc, #424]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a69      	ldr	r2, [pc, #420]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6213      	str	r3, [r2, #32]
 80018b2:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a66      	ldr	r2, [pc, #408]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6213      	str	r3, [r2, #32]
 80018be:	e01c      	b.n	80018fa <HAL_RCC_OscConfig+0x36e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d10c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x356>
 80018c8:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4a60      	ldr	r2, [pc, #384]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6213      	str	r3, [r2, #32]
 80018d4:	4b5e      	ldr	r3, [pc, #376]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4a5d      	ldr	r2, [pc, #372]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	e00b      	b.n	80018fa <HAL_RCC_OscConfig+0x36e>
 80018e2:	4b5b      	ldr	r3, [pc, #364]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a5a      	ldr	r2, [pc, #360]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	f023 0301 	bic.w	r3, r3, #1
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	4b58      	ldr	r3, [pc, #352]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a57      	ldr	r2, [pc, #348]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d015      	beq.n	800192e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7fe ff69 	bl	80007d8 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7fe ff65 	bl	80007d8 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	; 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e0b1      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001920:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0ee      	beq.n	800190a <HAL_RCC_OscConfig+0x37e>
 800192c:	e014      	b.n	8001958 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192e:	f7fe ff53 	bl	80007d8 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f7fe ff4f 	bl	80007d8 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	; 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e09b      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194c:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1ee      	bne.n	8001936 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d105      	bne.n	800196a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195e:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4a3b      	ldr	r2, [pc, #236]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001968:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8087 	beq.w	8001a82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d061      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d146      	bne.n	8001a16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001988:	4b33      	ldr	r3, [pc, #204]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7fe ff23 	bl	80007d8 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001996:	f7fe ff1f 	bl	80007d8 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e06d      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a8:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f0      	bne.n	8001996 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019bc:	d108      	bne.n	80019d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	4921      	ldr	r1, [pc, #132]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a19      	ldr	r1, [r3, #32]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	430b      	orrs	r3, r1
 80019e2:	491b      	ldr	r1, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7fe fef3 	bl	80007d8 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f6:	f7fe feef 	bl	80007d8 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e03d      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x46a>
 8001a14:	e035      	b.n	8001a82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_RCC_OscConfig+0x4cc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7fe fedc 	bl	80007d8 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a24:	f7fe fed8 	bl	80007d8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e026      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x498>
 8001a42:	e01e      	b.n	8001a82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e019      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40007000 	.word	0x40007000
 8001a58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_OscConfig+0x500>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000

08001a90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0d0      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b6a      	ldr	r3, [pc, #424]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d910      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 0207 	bic.w	r2, r3, #7
 8001aba:	4965      	ldr	r1, [pc, #404]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0b8      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d020      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aec:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a58      	ldr	r2, [pc, #352]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001af6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b10:	4b50      	ldr	r3, [pc, #320]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	494d      	ldr	r1, [pc, #308]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d040      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d115      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e07f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e073      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06b      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6e:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f023 0203 	bic.w	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4936      	ldr	r1, [pc, #216]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b80:	f7fe fe2a 	bl	80007d8 <HAL_GetTick>
 8001b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b88:	f7fe fe26 	bl	80007d8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e053      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 020c 	and.w	r2, r3, #12
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1eb      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d210      	bcs.n	8001be0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 0207 	bic.w	r2, r3, #7
 8001bc6:	4922      	ldr	r1, [pc, #136]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e032      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4916      	ldr	r1, [pc, #88]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	490e      	ldr	r1, [pc, #56]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c1e:	f000 f821 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001c22:	4602      	mov	r2, r0
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	490a      	ldr	r1, [pc, #40]	; (8001c58 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	5ccb      	ldrb	r3, [r1, r3]
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1cc>)
 8001c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x1d0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fd88 	bl	8000754 <HAL_InitTick>

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40022000 	.word	0x40022000
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08002cb0 	.word	0x08002cb0
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	b490      	push	{r4, r7}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c6a:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c6c:	1d3c      	adds	r4, r7, #4
 8001c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c74:	f240 2301 	movw	r3, #513	; 0x201
 8001c78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d002      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0x46>
 8001ca2:	e02b      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ca6:	623b      	str	r3, [r7, #32]
      break;
 8001ca8:	e02b      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	0c9b      	lsrs	r3, r3, #18
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3328      	adds	r3, #40	; 0x28
 8001cb4:	443b      	add	r3, r7
 8001cb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d012      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	0c5b      	lsrs	r3, r3, #17
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	3328      	adds	r3, #40	; 0x28
 8001cd2:	443b      	add	r3, r7
 8001cd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cde:	fb03 f202 	mul.w	r2, r3, r2
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cea:	e004      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	623b      	str	r3, [r7, #32]
      break;
 8001cfa:	e002      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cfe:	623b      	str	r3, [r7, #32]
      break;
 8001d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d02:	6a3b      	ldr	r3, [r7, #32]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc90      	pop	{r4, r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	08002c90 	.word	0x08002c90
 8001d14:	40021000 	.word	0x40021000
 8001d18:	007a1200 	.word	0x007a1200
 8001d1c:	003d0900 	.word	0x003d0900

08001d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d24:	4b02      	ldr	r3, [pc, #8]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	20000000 	.word	0x20000000

08001d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d38:	f7ff fff2 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	0adb      	lsrs	r3, r3, #11
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08002cc0 	.word	0x08002cc0

08001d5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <RCC_Delay+0x34>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <RCC_Delay+0x38>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0a5b      	lsrs	r3, r3, #9
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d78:	bf00      	nop
  }
  while (Delay --);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1e5a      	subs	r2, r3, #1
 8001d7e:	60fa      	str	r2, [r7, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f9      	bne.n	8001d78 <RCC_Delay+0x1c>
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	20000000 	.word	0x20000000
 8001d94:	10624dd3 	.word	0x10624dd3

08001d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d07d      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db8:	4b4f      	ldr	r3, [pc, #316]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10d      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	4a4b      	ldr	r2, [pc, #300]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	61d3      	str	r3, [r2, #28]
 8001dd0:	4b49      	ldr	r3, [pc, #292]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	4b46      	ldr	r3, [pc, #280]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d118      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dec:	4b43      	ldr	r3, [pc, #268]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a42      	ldr	r2, [pc, #264]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df8:	f7fe fcee 	bl	80007d8 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	e008      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e00:	f7fe fcea 	bl	80007d8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e06d      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e12:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d02e      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d027      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e52:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d014      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7fe fcb9 	bl	80007d8 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7fe fcb5 	bl	80007d8 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e036      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ee      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4917      	ldr	r1, [pc, #92]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	490b      	ldr	r1, [pc, #44]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4904      	ldr	r1, [pc, #16]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40007000 	.word	0x40007000
 8001f00:	42420440 	.word	0x42420440

08001f04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b08d      	sub	sp, #52	; 0x34
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f0c:	4b58      	ldr	r3, [pc, #352]	; (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001f0e:	f107 040c 	add.w	r4, r7, #12
 8001f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f18:	f240 2301 	movw	r3, #513	; 0x201
 8001f1c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
 8001f22:	2300      	movs	r3, #0
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b10      	cmp	r3, #16
 8001f36:	d00a      	beq.n	8001f4e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b10      	cmp	r3, #16
 8001f3c:	f200 808e 	bhi.w	800205c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d049      	beq.n	8001fda <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d079      	beq.n	8002040 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001f4c:	e086      	b.n	800205c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8001f4e:	4b49      	ldr	r3, [pc, #292]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001f54:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d07f      	beq.n	8002060 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	0c9b      	lsrs	r3, r3, #18
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	3330      	adds	r3, #48	; 0x30
 8001f6a:	443b      	add	r3, r7
 8001f6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f70:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d017      	beq.n	8001fac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	0c5b      	lsrs	r3, r3, #17
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	3330      	adds	r3, #48	; 0x30
 8001f88:	443b      	add	r3, r7
 8001f8a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001f9a:	4a37      	ldr	r2, [pc, #220]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001faa:	e004      	b.n	8001fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	4a33      	ldr	r2, [pc, #204]	; (800207c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001fb6:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc2:	d102      	bne.n	8001fca <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8001fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001fc8:	e04a      	b.n	8002060 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4a2c      	ldr	r2, [pc, #176]	; (8002080 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001fd8:	e042      	b.n	8002060 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fea:	d108      	bne.n	8001ffe <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8001ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffc:	e01f      	b.n	800203e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002008:	d109      	bne.n	800201e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002016:	f649 4340 	movw	r3, #40000	; 0x9c40
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
 800201c:	e00f      	b.n	800203e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002028:	d11c      	bne.n	8002064 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d016      	beq.n	8002064 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002036:	f24f 4324 	movw	r3, #62500	; 0xf424
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800203c:	e012      	b.n	8002064 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800203e:	e011      	b.n	8002064 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002040:	f7ff fe78 	bl	8001d34 <HAL_RCC_GetPCLK2Freq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	0b9b      	lsrs	r3, r3, #14
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	3301      	adds	r3, #1
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800205a:	e004      	b.n	8002066 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800205c:	bf00      	nop
 800205e:	e002      	b.n	8002066 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002060:	bf00      	nop
 8002062:	e000      	b.n	8002066 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002064:	bf00      	nop
    }
  }
  return (frequency);
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002068:	4618      	mov	r0, r3
 800206a:	3734      	adds	r7, #52	; 0x34
 800206c:	46bd      	mov	sp, r7
 800206e:	bd90      	pop	{r4, r7, pc}
 8002070:	08002ca0 	.word	0x08002ca0
 8002074:	40021000 	.word	0x40021000
 8002078:	007a1200 	.word	0x007a1200
 800207c:	003d0900 	.word	0x003d0900
 8002080:	aaaaaaab 	.word	0xaaaaaaab

08002084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e041      	b.n	800211a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fa9c 	bl	80005e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f000 faaa 	bl	800261c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e041      	b.n	80021b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d106      	bne.n	800214e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f839 	bl	80021c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3304      	adds	r3, #4
 800215e:	4619      	mov	r1, r3
 8002160:	4610      	mov	r0, r2
 8002162:	f000 fa5b 	bl	800261c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_TIM_PWM_Start+0x24>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	bf14      	ite	ne
 80021f0:	2301      	movne	r3, #1
 80021f2:	2300      	moveq	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	e022      	b.n	800223e <HAL_TIM_PWM_Start+0x6a>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d109      	bne.n	8002212 <HAL_TIM_PWM_Start+0x3e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b01      	cmp	r3, #1
 8002208:	bf14      	ite	ne
 800220a:	2301      	movne	r3, #1
 800220c:	2300      	moveq	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	e015      	b.n	800223e <HAL_TIM_PWM_Start+0x6a>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d109      	bne.n	800222c <HAL_TIM_PWM_Start+0x58>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	bf14      	ite	ne
 8002224:	2301      	movne	r3, #1
 8002226:	2300      	moveq	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	e008      	b.n	800223e <HAL_TIM_PWM_Start+0x6a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	bf14      	ite	ne
 8002238:	2301      	movne	r3, #1
 800223a:	2300      	moveq	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e05e      	b.n	8002304 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d104      	bne.n	8002256 <HAL_TIM_PWM_Start+0x82>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002254:	e013      	b.n	800227e <HAL_TIM_PWM_Start+0xaa>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b04      	cmp	r3, #4
 800225a:	d104      	bne.n	8002266 <HAL_TIM_PWM_Start+0x92>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002264:	e00b      	b.n	800227e <HAL_TIM_PWM_Start+0xaa>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b08      	cmp	r3, #8
 800226a:	d104      	bne.n	8002276 <HAL_TIM_PWM_Start+0xa2>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002274:	e003      	b.n	800227e <HAL_TIM_PWM_Start+0xaa>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2201      	movs	r2, #1
 8002284:	6839      	ldr	r1, [r7, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fc48 	bl	8002b1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1e      	ldr	r2, [pc, #120]	; (800230c <HAL_TIM_PWM_Start+0x138>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d107      	bne.n	80022a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a18      	ldr	r2, [pc, #96]	; (800230c <HAL_TIM_PWM_Start+0x138>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00e      	beq.n	80022ce <HAL_TIM_PWM_Start+0xfa>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b8:	d009      	beq.n	80022ce <HAL_TIM_PWM_Start+0xfa>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_TIM_PWM_Start+0x13c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_TIM_PWM_Start+0xfa>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <HAL_TIM_PWM_Start+0x140>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d111      	bne.n	80022f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b06      	cmp	r3, #6
 80022de:	d010      	beq.n	8002302 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f0:	e007      	b.n	8002302 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800

08002318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800232e:	2302      	movs	r3, #2
 8002330:	e0ac      	b.n	800248c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	f200 809f 	bhi.w	8002480 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	0800237d 	.word	0x0800237d
 800234c:	08002481 	.word	0x08002481
 8002350:	08002481 	.word	0x08002481
 8002354:	08002481 	.word	0x08002481
 8002358:	080023bd 	.word	0x080023bd
 800235c:	08002481 	.word	0x08002481
 8002360:	08002481 	.word	0x08002481
 8002364:	08002481 	.word	0x08002481
 8002368:	080023ff 	.word	0x080023ff
 800236c:	08002481 	.word	0x08002481
 8002370:	08002481 	.word	0x08002481
 8002374:	08002481 	.word	0x08002481
 8002378:	0800243f 	.word	0x0800243f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f9ac 	bl	80026e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0208 	orr.w	r2, r2, #8
 8002396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0204 	bic.w	r2, r2, #4
 80023a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6999      	ldr	r1, [r3, #24]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	619a      	str	r2, [r3, #24]
      break;
 80023ba:	e062      	b.n	8002482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f9f2 	bl	80027ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6999      	ldr	r1, [r3, #24]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	021a      	lsls	r2, r3, #8
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	619a      	str	r2, [r3, #24]
      break;
 80023fc:	e041      	b.n	8002482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fa3b 	bl	8002880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69da      	ldr	r2, [r3, #28]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0208 	orr.w	r2, r2, #8
 8002418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0204 	bic.w	r2, r2, #4
 8002428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69d9      	ldr	r1, [r3, #28]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	61da      	str	r2, [r3, #28]
      break;
 800243c:	e021      	b.n	8002482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fa85 	bl	8002954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69d9      	ldr	r1, [r3, #28]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	021a      	lsls	r2, r3, #8
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	61da      	str	r2, [r3, #28]
      break;
 800247e:	e000      	b.n	8002482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_TIM_ConfigClockSource+0x18>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e0b3      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x180>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e4:	d03e      	beq.n	8002564 <HAL_TIM_ConfigClockSource+0xd0>
 80024e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ea:	f200 8087 	bhi.w	80025fc <HAL_TIM_ConfigClockSource+0x168>
 80024ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f2:	f000 8085 	beq.w	8002600 <HAL_TIM_ConfigClockSource+0x16c>
 80024f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fa:	d87f      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x168>
 80024fc:	2b70      	cmp	r3, #112	; 0x70
 80024fe:	d01a      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0xa2>
 8002500:	2b70      	cmp	r3, #112	; 0x70
 8002502:	d87b      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x168>
 8002504:	2b60      	cmp	r3, #96	; 0x60
 8002506:	d050      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x116>
 8002508:	2b60      	cmp	r3, #96	; 0x60
 800250a:	d877      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x168>
 800250c:	2b50      	cmp	r3, #80	; 0x50
 800250e:	d03c      	beq.n	800258a <HAL_TIM_ConfigClockSource+0xf6>
 8002510:	2b50      	cmp	r3, #80	; 0x50
 8002512:	d873      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x168>
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d058      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x136>
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d86f      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x168>
 800251c:	2b30      	cmp	r3, #48	; 0x30
 800251e:	d064      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x156>
 8002520:	2b30      	cmp	r3, #48	; 0x30
 8002522:	d86b      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x168>
 8002524:	2b20      	cmp	r3, #32
 8002526:	d060      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x156>
 8002528:	2b20      	cmp	r3, #32
 800252a:	d867      	bhi.n	80025fc <HAL_TIM_ConfigClockSource+0x168>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d05c      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x156>
 8002530:	2b10      	cmp	r3, #16
 8002532:	d05a      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002534:	e062      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6899      	ldr	r1, [r3, #8]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f000 faca 	bl	8002ade <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002558:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	609a      	str	r2, [r3, #8]
      break;
 8002562:	e04e      	b.n	8002602 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6899      	ldr	r1, [r3, #8]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f000 fab3 	bl	8002ade <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002586:	609a      	str	r2, [r3, #8]
      break;
 8002588:	e03b      	b.n	8002602 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	461a      	mov	r2, r3
 8002598:	f000 fa2a 	bl	80029f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2150      	movs	r1, #80	; 0x50
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fa81 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 80025a8:	e02b      	b.n	8002602 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f000 fa48 	bl	8002a4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2160      	movs	r1, #96	; 0x60
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fa71 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 80025c8:	e01b      	b.n	8002602 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f000 fa0a 	bl	80029f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2140      	movs	r1, #64	; 0x40
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fa61 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 80025e8:	e00b      	b.n	8002602 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4619      	mov	r1, r3
 80025f4:	4610      	mov	r0, r2
 80025f6:	f000 fa58 	bl	8002aaa <TIM_ITRx_SetConfig>
        break;
 80025fa:	e002      	b.n	8002602 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025fc:	bf00      	nop
 80025fe:	e000      	b.n	8002602 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002600:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <TIM_Base_SetConfig+0xb8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00b      	beq.n	800264c <TIM_Base_SetConfig+0x30>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263a:	d007      	beq.n	800264c <TIM_Base_SetConfig+0x30>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <TIM_Base_SetConfig+0xbc>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d003      	beq.n	800264c <TIM_Base_SetConfig+0x30>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a25      	ldr	r2, [pc, #148]	; (80026dc <TIM_Base_SetConfig+0xc0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d108      	bne.n	800265e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <TIM_Base_SetConfig+0xb8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00b      	beq.n	800267e <TIM_Base_SetConfig+0x62>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d007      	beq.n	800267e <TIM_Base_SetConfig+0x62>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <TIM_Base_SetConfig+0xbc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <TIM_Base_SetConfig+0x62>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a18      	ldr	r2, [pc, #96]	; (80026dc <TIM_Base_SetConfig+0xc0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d108      	bne.n	8002690 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <TIM_Base_SetConfig+0xb8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d103      	bne.n	80026c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	615a      	str	r2, [r3, #20]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800

080026e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	f023 0201 	bic.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f023 0302 	bic.w	r3, r3, #2
 8002728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <TIM_OC1_SetConfig+0xc8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10c      	bne.n	8002756 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0308 	bic.w	r3, r3, #8
 8002742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <TIM_OC1_SetConfig+0xc8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d111      	bne.n	8002782 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800276c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	621a      	str	r2, [r3, #32]
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40012c00 	.word	0x40012c00

080027ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f023 0210 	bic.w	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f023 0320 	bic.w	r3, r3, #32
 80027f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a1d      	ldr	r2, [pc, #116]	; (800287c <TIM_OC2_SetConfig+0xd0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d10d      	bne.n	8002828 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a14      	ldr	r2, [pc, #80]	; (800287c <TIM_OC2_SetConfig+0xd0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d113      	bne.n	8002858 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800283e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	621a      	str	r2, [r3, #32]
}
 8002872:	bf00      	nop
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40012c00 	.word	0x40012c00

08002880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0303 	bic.w	r3, r3, #3
 80028b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <TIM_OC3_SetConfig+0xd0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10d      	bne.n	80028fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <TIM_OC3_SetConfig+0xd0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d113      	bne.n	800292a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	621a      	str	r2, [r3, #32]
}
 8002944:	bf00      	nop
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40012c00 	.word	0x40012c00

08002954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800299e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	031b      	lsls	r3, r3, #12
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <TIM_OC4_SetConfig+0x98>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d109      	bne.n	80029c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	621a      	str	r2, [r3, #32]
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	40012c00 	.word	0x40012c00

080029f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f023 0201 	bic.w	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f023 030a 	bic.w	r3, r3, #10
 8002a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	621a      	str	r2, [r3, #32]
}
 8002a42:	bf00      	nop
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f023 0210 	bic.w	r2, r3, #16
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	031b      	lsls	r3, r3, #12
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	621a      	str	r2, [r3, #32]
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f043 0307 	orr.w	r3, r3, #7
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	609a      	str	r2, [r3, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b087      	sub	sp, #28
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002af8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	021a      	lsls	r2, r3, #8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	609a      	str	r2, [r3, #8]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2201      	movs	r2, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1a      	ldr	r2, [r3, #32]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	401a      	ands	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a1a      	ldr	r2, [r3, #32]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e046      	b.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00e      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d009      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a10      	ldr	r2, [pc, #64]	; (8002c1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40012c00 	.word	0x40012c00
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40000800 	.word	0x40000800

08002c20 <__libc_init_array>:
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	2600      	movs	r6, #0
 8002c24:	4d0c      	ldr	r5, [pc, #48]	; (8002c58 <__libc_init_array+0x38>)
 8002c26:	4c0d      	ldr	r4, [pc, #52]	; (8002c5c <__libc_init_array+0x3c>)
 8002c28:	1b64      	subs	r4, r4, r5
 8002c2a:	10a4      	asrs	r4, r4, #2
 8002c2c:	42a6      	cmp	r6, r4
 8002c2e:	d109      	bne.n	8002c44 <__libc_init_array+0x24>
 8002c30:	f000 f822 	bl	8002c78 <_init>
 8002c34:	2600      	movs	r6, #0
 8002c36:	4d0a      	ldr	r5, [pc, #40]	; (8002c60 <__libc_init_array+0x40>)
 8002c38:	4c0a      	ldr	r4, [pc, #40]	; (8002c64 <__libc_init_array+0x44>)
 8002c3a:	1b64      	subs	r4, r4, r5
 8002c3c:	10a4      	asrs	r4, r4, #2
 8002c3e:	42a6      	cmp	r6, r4
 8002c40:	d105      	bne.n	8002c4e <__libc_init_array+0x2e>
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c48:	4798      	blx	r3
 8002c4a:	3601      	adds	r6, #1
 8002c4c:	e7ee      	b.n	8002c2c <__libc_init_array+0xc>
 8002c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c52:	4798      	blx	r3
 8002c54:	3601      	adds	r6, #1
 8002c56:	e7f2      	b.n	8002c3e <__libc_init_array+0x1e>
 8002c58:	08002cc8 	.word	0x08002cc8
 8002c5c:	08002cc8 	.word	0x08002cc8
 8002c60:	08002cc8 	.word	0x08002cc8
 8002c64:	08002ccc 	.word	0x08002ccc

08002c68 <memset>:
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4402      	add	r2, r0
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d100      	bne.n	8002c72 <memset+0xa>
 8002c70:	4770      	bx	lr
 8002c72:	f803 1b01 	strb.w	r1, [r3], #1
 8002c76:	e7f9      	b.n	8002c6c <memset+0x4>

08002c78 <_init>:
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	bf00      	nop
 8002c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7e:	bc08      	pop	{r3}
 8002c80:	469e      	mov	lr, r3
 8002c82:	4770      	bx	lr

08002c84 <_fini>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	bf00      	nop
 8002c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8a:	bc08      	pop	{r3}
 8002c8c:	469e      	mov	lr, r3
 8002c8e:	4770      	bx	lr
